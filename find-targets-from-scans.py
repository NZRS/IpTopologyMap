#!/usr/bin/python

__author__ = 'secastro'

import gzip
import csv
import json
from progressbar import ProgressBar
from radix import Radix
import argparse
import glob
import os

nz_prefix = set()

parser = argparse.ArgumentParser("Using data sets from scans.io, "
                                 "find suitable targets for probing")
parser.add_argument('--datadir', required=True, help="directory to save output")
parser.add_argument('--scandir', required=True,
                    help="directory with scans.io datasets")
args = parser.parse_args()


def is_ip_contained(a):
    """Use a radix tree to fast lookup the prefix covering the address"""
    return rt.search_best(network=a, masklen=32)


def extract_unique_address_from_scans(file_list, sample=False):
    """Using files extracted from https://scans.io/ to located potential destinations for testing"""
    addr_list = set()
    for scan_file in file_list:
        print "Reading file %s" % scan_file
        with gzip.open(scan_file, 'rb') as scan_data:
            csv_r = csv.reader(scan_data)

            # There is a header, skip it
            next(csv_r)

            idx = 0
            for row in csv_r:
                # row[1] is the address we want to check
                idx += 1
                addr_list.add(row[1])

                if idx % 100000 == 0:
                    print "Read %d records" % idx

                if sample and idx > 100000:
                    break

    return addr_list

"""Read the list of prefixes I'm interested on. Generated by the BGP topology map"""
with open('data/rv-nz-aspath.json', 'rb') as nz_prefixes:
    nz_aspath = json.load(nz_prefixes)
    for path in nz_aspath['aspath']:
        for prefix in path['prefixes']:
            nz_prefix.add(prefix)

"""Build the radix tree"""
rt = Radix()
for p1 in nz_prefix:
    [prefix, masklen] = p1.split("/")
    rt.add(network=prefix, masklen=int(masklen))

address_list = extract_unique_address_from_scans(glob.glob(os.path.join(
    args.scandir, '*.csv.gz')), sample=False)

print "%d addresses will be checked" % (len(address_list))
print "%d prefixes" % (len(nz_prefix))
selected_addr = []
pbar = ProgressBar(maxval=len(address_list)).start()
cnt = 0
for addr in address_list:
    prefix = is_ip_contained(addr)
    if prefix is not None:
        selected_addr.append(dict(prefix=prefix.prefix, address=addr))
    cnt += 1
    if cnt % 100 == 0:
        pbar.update(cnt)

pbar.finish()


print "%d addresses found" % len(selected_addr)
with open(os.path.join(args.datadir, 'dest-addr.json'), 'wb') as addr_file:
    json.dump([a for a in selected_addr], addr_file)
